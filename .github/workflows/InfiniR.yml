name: build Infinir for Alioth 
on: 
  schedule:
    - cron:  '0 8 * * *'
  workflow_dispatch:

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Setup build kernel environment
      run: |
        sudo apt-get update
        sudo apt-get install libncurses-dev libtinfo5 git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: Checkout Kernel Source Code
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: raystef66/InfiniR_kernel_alioth
        ref: 13.0-alioth
        path: android-kernel
       

    - name: Download Compiler - Arm GNU Toolchain
      run: |
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9

    - name: Download Compiler - aarch64 GNU Toolchain
      run: |
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9
    
    - name: Download Compiler - Snapdragon LLVM
      run: |
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master-kernel-build-2022/clang-r450784d.tar.gz
        tar -C clang-aosp/ -zxvf clang-r450784d.tar.gz
    - name: Variables
      run: |
        echo "KERNEL_DIR=$GITHUB_WORKSPACE/android-kernel" >> $GITHUB_ENV
        echo "CLANG_DIR=$GITHUB_WORKSPACE/clang-aosp/bin" >> $GITHUB_ENV
        echo "GCC_ARM64_DIR=$GITHUB_WORKSPACE/aarch64-linux-android-4.9/bin" >> $GITHUB_ENV
        echo "GCC_ARM_DIR=$GITHUB_WORKSPACE/arm-linux-androideabi-4.9/bin" >> $GITHUB_ENV
        echo "ZIMAGE_DIR=$GITHUB_WORKSPACE/android-kernel/out/arch/arm64/boot" >> $GITHUB_ENV
        echo "ANYKERNEL_DIR=$GITHUB_WORKSPACE/android-kernel/AnyKernel3" >> $GITHUB_ENV
        TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")
        DEVICE=alioth
        ZIPNAME=1
        echo "FINAL_ZIP=${ZIPNAME}-Inifinir-${DEVICE}-KERNEL-AOSP-${TIME}" >> $GITHUB_ENV
        sed -i 's/CONFIG_LOCALVERSION="-Inifinir"/CONFIG_LOCALVERSION="-1-Inifinir"/g' "android-kernel/arch/arm64/configs/vendor/alioth_defconfig"

    - name: Fix:Makefile:Properly disable Unknown Warning Option
      run: |
        sed -i 's/CLANG_FLAGS	+= -Werror=unknown-warning-option/CLANG_FLAGS	+= -Werror=unknown-warning-option -Wno-unknown-warning-option/g' "android-kernel/Makefile"

    - name: Apply KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        wget -q "https://raw.githubusercontent.com/CHIZI-0618/RK-KernelSU_Action/main/KernelSU.patch" -O KernelSU.patch
        git apply ./KernelSU.patch

    - name: Build kernel
      run: |
        cd android-kernel
        KERNEL_DEFCONFIG=vendor/alioth_defconfig
        ARCH=arm64
        SUBARCH=arm64
        # make O=out ARCH=arm64 CC=${{ env.CLANG_DIR }}/clang $KERNEL_DEFCONFIG
        make -j$(nproc --all) \
                      O=out \
                      ARCH=arm64 \
                      CC=${{ env.CLANG_DIR }}/clang \
                      CLANG_TRIPLE=${{ env.GCC_ARM64_DIR }}/aarch64-linux-gnu- \
                      CROSS_COMPILE=${{ env.GCC_ARM64_DIR }}/aarch64-linux-android- \
                      CROSS_COMPILE_ARM32=${{ env.GCC_ARM_DIR }}/arm-linux-androideabi- \
                      LD=ld.lld \ 
                      LLVM=1 \
                      LLVM_IAS=1
                     

    - name: generate dtb
      run: |
        find ${{ env.KERNEL_DIR }}/out/arch/arm64/boot/dts/vendor/qcom -name '*.dtb' -exec cat {} + >${{ env.KERNEL_DIR }}/out/arch/arm64/boot/dtb

    - name: Upload the kernel image
      uses: actions/upload-artifact@v3
      with:
        name: Image.gz-dtb
        path: ${{ env.ZIMAGE_DIR }}/Image.gz-dtb

    - name: Upload DTBO image
      uses: actions/upload-artifact@v3
      with:
        name: dtbo
        path: ${{ env.ZIMAGE_DIR }}/dtbo.img

    - name: Upload DTB image
      uses: actions/upload-artifact@v3
      with:
        name: dtb
        path: ${{ env.ZIMAGE_DIR }}/dtb

    - name: Make Anykernel for the kernel
      run: |
        cp -fp ${{ env.ZIMAGE_DIR }}/Image.gz-dtb ${{ env.ANYKERNEL_DIR }}
        cp -fp ${{ env.ZIMAGE_DIR }}/dtbo.img ${{ env.ANYKERNEL_DIR }}
        
        
    - name: Upload AnyKernel zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FINAL_ZIP}}
        path: ${{ env.ANYKERNEL_DIR }}
